import java.awt.Canvas;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Label;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.awt.image.BufferStrategy;

import javax.swing.JFrame;

public class game extends Canvas implements KeyListener, ActionListener, MouseListener, MouseMotionListener, Runnable {

	public static int sizex=400;
	public static int sizey=400;
	static JFrame jf;
	Thread t1;
	boolean running= false;
	Graphics g;
	int x=0,y=0,velx=2,vely=1;
	
	public void tick ()
	{
		System.out.println("Tick");
	    BufferStrategy bs= getBufferStrategy();
		if ( bs== null)
		{ 
			System.out.println("Tick-BS");
			createBufferStrategy(3);
		    return;
		}
		
		Graphics g=bs.getDrawGraphics();
		g.setColor(Color.black);
		g.fillRect(0, 0, 400, 400);
		x+=velx;
		y+=vely;
		if (x+30>sizex) {velx=velx*(-1);}
		if (y+60>sizey) {vely=vely*(-1);}
		if (x<0) {velx=velx*(-1);}
		if (y<0) {vely=vely*(-1);}
		
		
		g.setColor(Color.red);
		g.fillOval(x, y, 30, 30);
		
		
				
		
		g.dispose();
		bs.show();
		
	}
	
	
	
	
	
	
	
	
	
	public void run() {
		System.out.println("Thread-run");
	    //******
		double unprocessed = 0.0;
		double nsPerTick= 1000000000/60;
		long lastTime= System.nanoTime();
		long timer= System.currentTimeMillis();
		int fps= 0;
		int tps=0;
		boolean canRender=false;
		
		while (running) {
			long now= System.nanoTime();
			unprocessed += (now- lastTime)/nsPerTick;	
			lastTime=now;
			
			if (unprocessed >= 1.0) {
			tick();
			unprocessed --;
			tps ++;
			canRender=true;
			
			}// else canRender = false;
			try {
				Thread.sleep(1);
			} catch (InterruptedException e) {			
				e.printStackTrace();
			}
			if(canRender) {
				
				//render
				fps++;
			}
			if(System.currentTimeMillis()-1000 > timer) {
				
				timer+=1000;
				System.out.printf("FPS: %d  I  TPS: %d\n",fps,tps);
				fps=0;
				tps=0;
			}
			
			
			
		}
		
		
		
				
		
		
		
		
		stop(); 
	}
	
	void stop() {
		
		System.out.println("Stop");
	    if (running == false) {return;}
		if (running == true) {
	    running = false;
		try {
			t1.join();
		} catch (InterruptedException e) {e.printStackTrace();}
		
		
		
		}
		
	}
	
	
	void start() {
		System.out.println("Start");
	    if (running == true) {return;}
		if (running == false) {
	    running = true;
		t1= new Thread(this);
		t1.start();
		}
	}
	
	
	
	
	
	game()
	
	
	
	{
		addKeyListener(this);
        
		
	}
	
	
	
	
	
	public static void main(String[] args) {
	
		
		
		
		jf=new JFrame("LUTFU");
		game g1=new game();
		jf.add(g1);
		
		jf.setSize(sizex, sizey);
		jf.setResizable(false);
		jf.setDefaultCloseOperation(jf.EXIT_ON_CLOSE);
		jf.setLocationRelativeTo(null);
		jf.setFocusable(true);
		jf.setVisible(true);
		jf.requestFocus();
		g1.start();
	}


	public void actionPerformed(ActionEvent e) {	}

	
	public void keyTyped(KeyEvent e) {	}
	public void keyPressed(KeyEvent e) {System.out.println("wert");	}
	public void keyReleased(KeyEvent e) {	}

	
	public void mouseClicked(MouseEvent e) {	}
	public void mousePressed(MouseEvent e) {	}
	public void mouseReleased(MouseEvent e) {	}
	public void mouseEntered(MouseEvent e) {	}
	public void mouseExited(MouseEvent e) {   }


	public void mouseDragged(MouseEvent e) {	}
	public void mouseMoved(MouseEvent e) {	}

}
